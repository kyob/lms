#!/usr/bin/perl
#
#  LMS git
#
# trzeba ustawic, gdzie ma zapisywac faktury PDF:
# $path -  sciezka do zapisanych faktur
#
# wywoÅ‚anie:
# lms-sevainvoice --fwyear=2012 --fwmonth=11

use strict;
use DBI;
use Config::IniFiles;
use Getopt::Long;
use vars qw($configfile $help $version $quiet $fwmonth $fwyear);
use POSIX qw(strftime);
use LWP::UserAgent;
use Time::Local;
use MIME::QuotedPrint;
use File::Path qw(make_path);
use Time::HiRes qw( time );

my $start = time();
my $path = "/home/lms/faktury/";

my $_version = 'git';

my %options = (
    "--config-file|C=s"     =>      \$configfile,
    "--quiet|q"     	=>      \$quiet,
    "--help|h"              =>      \$help,
    "--version|v"           =>      \$version,
    "--fwmonth|m=s"         =>	\$fwmonth,
    "--fwyear|y=s"          =>	\$fwyear,
);

Getopt::Long::config("no_ignore_case");
GetOptions(%options);

if($help)
{
    print STDERR <<EOF;
lms-sendinvoices, version $_version
(C) 2001-2012 LMS Developers

-C, --config-file=/etc/lms/lms.ini    alternate config file 
	        (default: /etc/lms/lms.ini);
-q, --quiet		    suppress any output, except errors;
-h, --help		    print this help and exit;
-v, --version		    print version info and exit;
-m, --fwmonth               set month;
-y, --fwyear                set year;
EOF
    exit 0;
}


if($version)
{
    print STDERR <<EOF;
lms-sendinvoices, version $_version
(C) 2001-2011 LMS Developers

EOF
    exit 0;
}

if(!$configfile)
{
    $configfile = "/etc/lms/lms.ini";
}

if(! -r $configfile)
{
    print STDERR "Fatal error: Unable to read configuration file $configfile, exiting.\n";
    exit 1;
}

if(!$quiet)
{
    print STDOUT "lms-saveinvoices, version $_version\n";
    print STDOUT "(C) 2001-2011 LMS Developers\n";
    print STDOUT "Using file $configfile as config.\n";
}

my $ini = new Config::IniFiles -file => $configfile;
print @Config::IniFiles::errors;

my $dbtype = $ini->val('database', 'type') || 'mysql';
my $dbhost = $ini->val('database', 'host') || 'localhost';
my $dbuser = $ini->val('database', 'user') || '';
my $dbpasswd = $ini->val('database', 'password') || '';
my $dbname = $ini->val('database', 'database') || 'lms';

my $lms_url = $ini->val('sendinvoices', 'lms_url') || 'http://lms2.alfa-system.pl';
my $lms_user = $ini->val('sendinvoices', 'lms_user') || '';
my $lms_password = $ini->val('sendinvoices', 'lms_password') || '';


my $filetype = $ini->val('invoices', 'type') || '';
my $customergroups = $ini->val('sendinvoices', 'customergroups') || '';


my $dbase;
my $utsfmt;

if($dbtype =~ /mysql/)
{
    $dbase = DBI->connect("DBI:mysql:database=$dbname;host=$dbhost","$dbuser","$dbpasswd", { RaiseError => 1 });
    $dbase->do("SET NAMES utf8");
    $utsfmt = "UNIX_TIMESTAMP()";
}
else
{
    print STDERR "Fatal error: unsupported database type: $dbtype, exiting.\n";
    exit 1;
}

sub localtime2()
{
	return localtime();
}


# get/set invoice file type
my $dbq = $dbase->prepare("SELECT value FROM uiconfig WHERE section='invoices' AND var='type' AND disabled=0");
$dbq->execute();
if(my $row = $dbq->fetchrow_hashref())
{
    $filetype = $row->{'value'};
}

my $fencoding = 'quoted-printable';
my $ftype = 'text/html';
my $fext = 'html';

if($filetype eq 'pdf')
{
    $ftype = 'application/octetstream';
    $fencoding = 'Base64';
    $fext = 'pdf';
}



#my $month =  int strftime("%m",localtime2());
#my $day = int strftime("%d",localtime2());
#my $year = strftime("%Y",localtime2());
my $month = $fwmonth;
my $year = $fwyear;
my $daystart = strftime("%s", 0, 0, 0, 0, $month - 1, $year - 1900);
my $dayend = strftime("%s", 59, 59, 23, 22, $month - 1, $year - 1900);

    make_path($path.$year.'/'.$month.'/');

my $groupwhere = '';
my $groupjoin = '';

if($customergroups)
{
    $customergroups = "UPPER('$customergroups')";
    $customergroups =~ s/[ \t]+/\'\),UPPER\(\'/g;
    $groupwhere = " AND UPPER(customergroups.name) IN ($customergroups)";  
    $groupjoin = "LEFT JOIN customerassignments ON (d.customerid = customerassignments.customerid) 
	    LEFT JOIN customergroups ON (customerassignments.customergroupid = customergroups.id) ";
}

$dbq = $dbase->prepare("SELECT d.id, d.number, d.cdate, c.email, d.name, d.customerid, n.template
	    FROM documents d 
	    LEFT JOIN customers c ON (c.id = d.customerid) 
	    LEFT JOIN numberplans n ON (n.id = d.numberplanid)
	    $groupjoin
	    WHERE d.cdate >= $daystart AND d.cdate <= $dayend
		$groupwhere
		ORDER BY d.id ASC");


$dbq->execute();
while(my $row = $dbq->fetchrow_hashref())
{
my $ua = LWP::UserAgent->new;
    my $response = $ua->get($lms_url.'/?m=invoice&override=1&original=0&id='.$row->{'id'}.'&loginform[login]='.$lms_user.'&loginform[pwd]='.$lms_password);
    
    if ($response->is_success)
    {
	my $date = strftime("%Y-%m-%d", localtime($row->{'cdate'}));
	
	my $pdf_data = $response->content;

	open my $ofh, '>:raw', $path.$year.'/'.$month.'/'.$date.'_'.$row->{'id'}.'.'.$fext
	    or die "Could not write: $!";
	    print {$ofh} $pdf_data;
	    close $ofh;
	    
	
	if(!$quiet)
	{
	    print "Invoice No. $row->{id} for $row->{'name'}\n";
	}
    }
    else
    {
	print STDERR "Error: ".$response->status_line."\n";
    }
}

$dbq->finish();
$dbase->disconnect();

my $end = time();
printf("%.2f\n", $end - $start);